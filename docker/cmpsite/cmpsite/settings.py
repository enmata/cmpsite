"""
Django settings for cmpsite project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os                   # Needed for SECRET_KEY import from secrets

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = '&rvth@q684+xehh!myc!h%6hz#cs)94iobgkbmdnu7vj@*y3&+'
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
# DJANGO_DEBUG is set on cmpsite_02_configmap
DEBUG = os.environ.get('DJANGO_DEBUG', "True")

# DJANGO_ALLOWED_HOSTS is set on cmpsite_02_configmap
ALLOWED_HOSTS = [ os.environ['DJANGO_ALLOWED_HOSTS'] , 'localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'cmpapi.apps.CmpapiConfig',         #Main cmpapi
    'rest_framework',                   #Used for cmpapi
    'health_check',                     #Used for heatlcheck BASE_URL/hc
    'health_check.db',                  #Used for heatlcheck BASE_URL/hc
    'health_check.cache',               #Used for heatlcheck BASE_URL/hc
    'health_check.storage',             #Used for heatlcheck BASE_URL/hc
    'health_check.contrib.migrations',  #Used for heatlcheck BASE_URL/hc
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cmpsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cmpsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': BASE_DIR / 'cmpsite/cmpdb/db.sqlite3',
        'NAME': BASE_DIR / os.environ.get('DJANGO_DB_LOCATION', "/var/log/cmpsite/django.log" ),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# DJANGO_LOG_LEVEL and DJANGO_LOG_LOCATION are set on cmpsite_02_configmap
DJANGO_LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO').upper()
DJANGO_LOG_LOCATION = os.getenv('DJANGO_LOG_LOCATION',"/var/log/cmpsite/django.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": DJANGO_LOG_LEVEL, "handlers": ["file"]},
    "handlers": {
        "file": {
            "level": DJANGO_LOG_LEVEL,
            "class": "logging.FileHandler",
            "filename": DJANGO_LOG_LOCATION,
            "formatter": "app",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": DJANGO_LOG_LEVEL,
            "propagate": True
        },
    },
    "formatters": {
        "app": {
            "format": (
                u"%(asctime)s [%(levelname)-8s] "
                "(%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
}
